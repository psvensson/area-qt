// Generated by CoffeeScript 1.9.3
(function() {
  var QuadTree,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  QuadTree = (function() {
    function QuadTree(bounds, maxObjectsPerLevel) {
      this.bounds = bounds;
      this.maxObjectsPerLevel = maxObjectsPerLevel;
      this._getMidPoints = bind(this._getMidPoints, this);
      this._getIndexFor = bind(this._getIndexFor, this);
      this.getCollissionsFor = bind(this.getCollissionsFor, this);
      this.remove = bind(this.remove, this);
      this.retrieve = bind(this.retrieve, this);
      this.insert = bind(this.insert, this);
      this.subTrees = [];
      this.objects = [];
    }

    QuadTree.prototype.insert = function(rect) {
      var i, ind, index, j, len, newObjects, o, ref, subtree;
      if (rect.x < this.bounds.x || rect.x > this.bounds.x + this.bounds.width || rect.y < this.bounds.y || rect.y > this.bounds.y + this.bounds.height) {
        xyzzy();
      }
      ind = this._getIndexFor(rect);
      if (this.subTrees.length > 0 && ind > -1) {
        this.subTrees[ind].insert(rect);
      } else {
        this.objects.push(rect);
      }
      if (this.objects.length > this.maxObjectsPerLevel) {
        this.subTrees.push(new QuadTree({
          x: this.bounds.x + this.bounds.width / 2,
          y: this.bounds.y,
          width: this.bounds.width / 2,
          height: this.bounds.height / 2
        }, this.maxObjectsPerLevel));
        this.subTrees.push(new QuadTree({
          x: this.bounds.x,
          y: this.bounds.y,
          width: this.bounds.width / 2,
          height: this.bounds.height / 2
        }, this.maxObjectsPerLevel));
        this.subTrees.push(new QuadTree({
          x: this.bounds.x,
          y: this.bounds.y + this.bounds.height / 2,
          width: this.bounds.width / 2,
          height: this.bounds.height / 2
        }, this.maxObjectsPerLevel));
        this.subTrees.push(new QuadTree({
          x: this.bounds.x + this.bounds.width / 2,
          y: this.bounds.y + this.bounds.height / 2,
          width: this.bounds.width / 2,
          height: this.bounds.height / 2
        }, this.maxObjectsPerLevel));
        newObjects = [];
        ref = this.objects;
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          o = ref[i];
          index = this._getIndexFor(o);
          if (index > -1) {
            subtree = this.subTrees[index];
            subtree.insert(o);
          } else {
            newObjects.push(o);
          }
        }
        return this.objects = newObjects;
      }
    };

    QuadTree.prototype.retrieve = function(rect) {
      var index, rv;
      rv = [];
      index = this._getIndexFor(rect);
      if (this.subTrees.length > 0 && index > -1) {
        rv = this.subTrees[index].retrieve(rect);
      } else {
        this.objects.forEach(function(object) {
          if (object.x === rect.x && object.y === rect.y && object.width === rect.width && object.height === rect.height) {
            return rv.push(object);
          }
        });
      }
      return rv;
    };

    QuadTree.prototype.remove = function(rect) {};

    QuadTree.prototype.getCollissionsFor = function(rect) {};

    QuadTree.prototype._getIndexFor = function(rect) {
      var bottom, index, left, midx, midy, ref, right, top;
      index = -1;
      ref = this._getMidPoints(), midx = ref[0], midy = ref[1];
      top = rect.y < midy && (rect.y + rect.height) < midy;
      bottom = rect.y >= midy && (rect.y + rect.height) < this.bounds.y + midy;
      left = rect.x < midx && (rect.x + rect.width) < midx;
      right = rect.x >= midx && (rect.x + rect.width) < this.bounds.x + midx;
      if (top && right) {
        index = 0;
      }
      if (top && left) {
        index = 1;
      }
      if (bottom && left) {
        index = 2;
      }
      if (bottom && right) {
        index = 3;
      }
      return index;
    };

    QuadTree.prototype._getMidPoints = function() {
      return [this.bounds.x + this.bounds.width / 2, this.bounds.y + this.bounds.height / 2];
    };

    return QuadTree;

  })();

  module.exports = QuadTree;

}).call(this);

//# sourceMappingURL=QuadTree.js.map
