// Generated by CoffeeScript 1.9.3
(function() {
  var QuadTree, expect;

  expect = require('chai').expect;

  QuadTree = require('../lib/QuadTree');

  describe('QuadTree Tests', function() {
    var o1, qt, r1;
    qt = new QuadTree({
      x: -100,
      y: -100,
      width: 100,
      height: 200
    }, 200);
    r1 = {
      x: 0,
      y: 0,
      width: 10,
      height: -10
    };
    o1 = {
      x: 0,
      y: 0,
      width: 10,
      height: -10,
      id: 17
    };
    it('should be able to insert and retrieve a rect', function(done) {
      var test;
      qt.insert(o1);
      test = qt.retrieve(r1)[0];
      expect(test.id).to.equal(o1.id);
      return done();
    });
    return it('should be able to insert and retrieve a number of rects that is larger than maxobject', function(done) {
      var i, j, o, r, succeed, testarr, x, y;
      testarr = [];
      succeed = false;
      for (i = j = 1; j <= 500; i = ++j) {
        x = parseInt(Math.random() * 100);
        y = parseInt(Math.random() * 100);
        o = {
          x: 0,
          y: y,
          width: 10,
          height: 10,
          id: i
        };
        r = {
          x: 0,
          y: y,
          width: 10,
          height: 10
        };
        testarr.push({
          o: o,
          r: r
        });
        qt.insert(o);
      }
      testarr.forEach(function(test) {
        var result;
        result = qt.retrieve(test.r);
        return result.forEach((function(_this) {
          return function(res) {
            if (res.id === test.o.id) {
              return succeed = true;
            }
          };
        })(this));
      });
      expect(succeed).to.equal(true);
      return done();
    });
  });

}).call(this);

//# sourceMappingURL=qt-spec.js.map
